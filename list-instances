#!/bin/bash

set -eu

EC2_METADATA_ENDPOINT=169.254.169.254

__help=$(cat <<EOF
Usage: list-instances [--vpc-id VPC_ID] [--env ENV] [--subsystem SUBSYSTEM] [--component COMPONENT] [--output OUTPUT]

Special VPC_ID values:
    - 'default': use default VPC
    - 'current': use VPC of EC2 instance

OUTPUT options are the same as for the AWS CLI.
EOF
)

__output_format=table

__query=$(cat <<EOF
Reservations[].Instances[].{
   _1_InstanceId: InstanceId,
   _2_PublicIP: PublicIpAddress,
   _3_PrivateIP: PrivateIpAddress,
   _4_Name: Tags[?Key==\`Name\`]|[0].Value,
   _5_Subsystem: Tags[?Key==\`Subsystem\`]|[0].Value,
   _6_Component: Tags[?Key==\`Component\`]|[0].Value,
   _7_ASG: Tags[?Key==\`aws:autoscaling:groupName\`]|[0].Value
}
EOF
)

__filters=('Name=instance-state-name,Values=running')

default_vpc () {
    aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query "Vpcs[0].VpcId" --output=text
}

check_metadata_endpoint() {
    if ! curl --silent --connect-timeout 1 "http://${EC2_METADATA_ENDPOINT}/latest" | grep 'meta-data' ; then
        echo "AWS EC2 Instance Metadata service is not available." 1>&2;
        exit 1
    fi
}

current_vpc () {
    check_metadata_endpoint
    ec2_instance_mac=$(curl --no-progress-meter --connect-timeout 1 "http://${EC2_METADATA_ENDPOINT}/latest/meta-data/mac")
    curl --no-progress-meter --connect-timeout 1 "http://${EC2_METADATA_ENDPOINT}/latest/meta-data/network/interfaces/macs/${ec2_instance_mac}/vpc-id"
}

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --vpc-id)
            vpc_id="$2"
            if [[ "${vpc_id}" == 'current' ]]; then
                vpc_id=$(current_vpc)
            elif [[ "${vpc_id}" == 'default' ]]; then
                vpc_id=$(default_vpc)
            fi
            __filters+=("Name=vpc-id,Values=${vpc_id}")
            shift
            ;;
        --subsystem)
            __filters+=("Name=tag:Subsystem,Values=$2")
            shift
            ;;
        --component)
            __filters+=("Name=tag:Component,Values=$2")
            shift
            ;;
        --output)
            __output_format="$2"
            shift
            ;;
        --help)
            echo "${__help}"
            exit 0
            ;;
        *)
            echo "Unknown parameter: $1"
            echo "${__help}"
            exit 1
            ;;
    esac
    shift
done

__args=()
__args+=('--query' "${__query}")
__args+=('--filters' "${__filters[@]}")
__args+=('--output' "${__output_format}")

__out=$(aws ec2 describe-instances "${__args[@]}")

if [[ "${__output_format}" == 'table' ]]; then
    __out=$(echo "${__out}" | tail -n +3 | sed 's/_[0-9]_/   /g')
fi

echo "${__out}"
